{"ast":null,"code":"import Repository, { baseStoreURL, serializeQuery } from './Repository';\n\nclass StoreRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async getStores(payload) {\n    const endPoint = `stores?${serializeQuery(payload)}`;\n    const reponse = await Repository.get(`${baseStoreURL}/${endPoint}`).then(response => {\n      if (response.data.length > 0) {\n        return response.data;\n      } else {\n        return null;\n      }\n    }).catch(error => {\n      console.log(JSON.stringify(error));\n      return null;\n    });\n    return reponse;\n  }\n\n  async getStoreBySlug(payload) {\n    const reponse = await Repository.get(`${baseStoreURL}/stores?slug=${payload}`).then(response => {\n      if (response.data.length > 0) {\n        return response.data[0];\n      } else {\n        return null;\n      }\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getStoreItemsByKeyword(payload) {\n    const reponse = await Repository.get(`${baseStoreURL}/posts?title_contains=${payload}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getPostItemsByCategory(payload) {\n    const reponse = await Repository.get(`${baseStoreURL}/posts?title_contains=${payload}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new StoreRepository();","map":{"version":3,"sources":["F:/UZOMOS PROJECT/uzomas_frontend/repositories/StoreRepository.js"],"names":["Repository","baseStoreURL","serializeQuery","StoreRepository","constructor","callback","getStores","payload","endPoint","reponse","get","then","response","data","length","catch","error","console","log","JSON","stringify","getStoreBySlug","getStoreItemsByKeyword","getPostItemsByCategory"],"mappings":"AAAA,OAAOA,UAAP,IAAqBC,YAArB,EAAmCC,cAAnC,QAAyD,cAAzD;;AAEA,MAAMC,eAAN,CAAsB;AAClBC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AAED,QAAMC,SAAN,CAAgBC,OAAhB,EAAyB;AACrB,UAAMC,QAAQ,GAAI,UAASN,cAAc,CAACK,OAAD,CAAU,EAAnD;AACA,UAAME,OAAO,GAAG,MAAMT,UAAU,CAACU,GAAX,CAAgB,GAAET,YAAa,IAAGO,QAAS,EAA3C,EACjBG,IADiB,CACXC,QAAD,IAAc;AAChB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,eAAOF,QAAQ,CAACC,IAAhB;AACH,OAFD,MAEO;AACH,eAAO,IAAP;AACH;AACJ,KAPiB,EAQjBE,KARiB,CAQVC,KAAD,IAAW;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAAZ;AACA,aAAO,IAAP;AACH,KAXiB,CAAtB;AAYA,WAAOP,OAAP;AACH;;AAED,QAAMY,cAAN,CAAqBd,OAArB,EAA8B;AAC1B,UAAME,OAAO,GAAG,MAAMT,UAAU,CAACU,GAAX,CACjB,GAAET,YAAa,gBAAeM,OAAQ,EADrB,EAGjBI,IAHiB,CAGXC,QAAD,IAAc;AAChB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,eAAOF,QAAQ,CAACC,IAAT,CAAc,CAAd,CAAP;AACH,OAFD,MAEO;AACH,eAAO,IAAP;AACH;AACJ,KATiB,EAUjBE,KAViB,CAUVC,KAAD,KAAY;AAAEA,MAAAA,KAAK,EAAEG,IAAI,CAACC,SAAL,CAAeJ,KAAf;AAAT,KAAZ,CAVW,CAAtB;AAWA,WAAOP,OAAP;AACH;;AAED,QAAMa,sBAAN,CAA6Bf,OAA7B,EAAsC;AAClC,UAAME,OAAO,GAAG,MAAMT,UAAU,CAACU,GAAX,CACjB,GAAET,YAAa,yBAAwBM,OAAQ,EAD9B,EAGjBI,IAHiB,CAGXC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KALiB,EAMjBE,KANiB,CAMVC,KAAD,KAAY;AAAEA,MAAAA,KAAK,EAAEG,IAAI,CAACC,SAAL,CAAeJ,KAAf;AAAT,KAAZ,CANW,CAAtB;AAOA,WAAOP,OAAP;AACH;;AAED,QAAMc,sBAAN,CAA6BhB,OAA7B,EAAsC;AAClC,UAAME,OAAO,GAAG,MAAMT,UAAU,CAACU,GAAX,CACjB,GAAET,YAAa,yBAAwBM,OAAQ,EAD9B,EAGjBI,IAHiB,CAGXC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KALiB,EAMjBE,KANiB,CAMVC,KAAD,KAAY;AAAEA,MAAAA,KAAK,EAAEG,IAAI,CAACC,SAAL,CAAeJ,KAAf;AAAT,KAAZ,CANW,CAAtB;AAOA,WAAOP,OAAP;AACH;;AAzDiB;;AA4DtB,eAAe,IAAIN,eAAJ,EAAf","sourcesContent":["import Repository, { baseStoreURL, serializeQuery } from './Repository';\r\n\r\nclass StoreRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    async getStores(payload) {\r\n        const endPoint = `stores?${serializeQuery(payload)}`;\r\n        const reponse = await Repository.get(`${baseStoreURL}/${endPoint}`)\r\n            .then((response) => {\r\n                if (response.data.length > 0) {\r\n                    return response.data;\r\n                } else {\r\n                    return null;\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(JSON.stringify(error));\r\n                return null;\r\n            });\r\n        return reponse;\r\n    }\r\n\r\n    async getStoreBySlug(payload) {\r\n        const reponse = await Repository.get(\r\n            `${baseStoreURL}/stores?slug=${payload}`\r\n        )\r\n            .then((response) => {\r\n                if (response.data.length > 0) {\r\n                    return response.data[0];\r\n                } else {\r\n                    return null;\r\n                }\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getStoreItemsByKeyword(payload) {\r\n        const reponse = await Repository.get(\r\n            `${baseStoreURL}/posts?title_contains=${payload}`\r\n        )\r\n            .then((response) => {\r\n                return response.data;\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getPostItemsByCategory(payload) {\r\n        const reponse = await Repository.get(\r\n            `${baseStoreURL}/posts?title_contains=${payload}`\r\n        )\r\n            .then((response) => {\r\n                return response.data;\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n}\r\n\r\nexport default new StoreRepository();\r\n"]},"metadata":{},"sourceType":"module"}