{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\UZomus\\\\uzomas_frontend\\\\components\\\\partials\\\\account\\\\sellerModules\\\\SellerProductPrice.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { Form, Input, Select, Button } from 'antd';\nconst {\n  Option\n} = Select;\n\nconst PriceInput = ({\n  value = {},\n  onChange\n}) => {\n  const {\n    0: number,\n    1: setNumber\n  } = useState(0);\n  const {\n    0: currency,\n    1: setCurrency\n  } = useState('rmb');\n\n  const triggerChange = changedValue => {\n    onChange === null || onChange === void 0 ? void 0 : onChange(_objectSpread(_objectSpread({\n      number,\n      currency\n    }, value), changedValue));\n  };\n\n  const onNumberChange = e => {\n    const newNumber = parseInt(e.target.value || '0', 10);\n\n    if (Number.isNaN(number)) {\n      return;\n    }\n\n    if (!('number' in value)) {\n      setNumber(newNumber);\n    }\n\n    triggerChange({\n      number: newNumber\n    });\n  };\n\n  const onCurrencyChange = newCurrency => {\n    if (!('currency' in value)) {\n      setCurrency(newCurrency);\n    }\n\n    triggerChange({\n      currency: newCurrency\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      value: value.number || number,\n      onChange: onNumberChange,\n      style: {\n        width: 100\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      value: value.currency || currency,\n      style: {\n        width: 80,\n        margin: '0 8px'\n      },\n      onChange: onCurrencyChange,\n      children: /*#__PURE__*/_jsxDEV(Option, {\n        value: \"dollar\",\n        children: \"USD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\nconst SellerProductPrice = () => {\n  const onFinish = values => {\n    console.log('Received values from form: ', values);\n  };\n\n  const checkPrice = (_, value) => {\n    if (value.number > 0) {\n      return Promise.resolve();\n    }\n\n    return Promise.reject(new Error('Price must be greater than zero!'));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      name: \"customized_form_controls\",\n      layout: \"inline\",\n      onFinish: onFinish,\n      initialValues: {\n        price: {\n          number: 0,\n          currency: 'gbr'\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"price\",\n        label: \"Product Price\",\n        rules: [{\n          validator: checkPrice\n        }],\n        children: /*#__PURE__*/_jsxDEV(PriceInput, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\nexport default SellerProductPrice;","map":{"version":3,"sources":["F:/UZomus/uzomas_frontend/components/partials/account/sellerModules/SellerProductPrice.jsx"],"names":["React","useState","Form","Input","Select","Button","Option","PriceInput","value","onChange","number","setNumber","currency","setCurrency","triggerChange","changedValue","onNumberChange","e","newNumber","parseInt","target","Number","isNaN","onCurrencyChange","newCurrency","width","margin","SellerProductPrice","onFinish","values","console","log","checkPrice","_","Promise","resolve","reject","Error","price","validator"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, Input, Select, Button } from 'antd';\r\nconst { Option } = Select;\r\n\r\nconst PriceInput = ({ value = {}, onChange }) => {\r\n    const [number, setNumber] = useState(0);\r\n    const [currency, setCurrency] = useState('rmb');\r\n\r\n    const triggerChange = (changedValue) => {\r\n        onChange?.({\r\n            number,\r\n            currency,\r\n            ...value,\r\n            ...changedValue,\r\n        });\r\n    };\r\n\r\n    const onNumberChange = (e) => {\r\n        const newNumber = parseInt(e.target.value || '0', 10);\r\n\r\n        if (Number.isNaN(number)) {\r\n            return;\r\n        }\r\n\r\n        if (!('number' in value)) {\r\n            setNumber(newNumber);\r\n        }\r\n\r\n        triggerChange({\r\n            number: newNumber,\r\n        });\r\n    };\r\n\r\n    const onCurrencyChange = (newCurrency) => {\r\n        if (!('currency' in value)) {\r\n            setCurrency(newCurrency);\r\n        }\r\n\r\n        triggerChange({\r\n            currency: newCurrency,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <span>\r\n            <Input\r\n                type=\"text\"\r\n                value={value.number || number}\r\n                onChange={onNumberChange}\r\n                style={{\r\n                    width: 100,\r\n                }}\r\n            />\r\n            <Select\r\n                value={value.currency || currency}\r\n                style={{\r\n                    width: 80,\r\n                    margin: '0 8px',\r\n                }}\r\n                onChange={onCurrencyChange}>\r\n                <Option value=\"dollar\">USD</Option>\r\n                {/* <Option value=\"euro\">Euro</Option>\r\n                <Option value=\"gbr\">GBR</Option> */}\r\n            </Select>\r\n        </span>\r\n    );\r\n};\r\n\r\nconst SellerProductPrice = () => {\r\n    const onFinish = (values) => {\r\n        console.log('Received values from form: ', values);\r\n    };\r\n\r\n    const checkPrice = (_, value) => {\r\n        if (value.number > 0) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(new Error('Price must be greater than zero!'));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                name=\"customized_form_controls\"\r\n                layout=\"inline\"\r\n                onFinish={onFinish}\r\n                initialValues={{\r\n                    price: {\r\n                        number: 0,\r\n                        currency: 'gbr',\r\n                    },\r\n                }}>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    label=\"Product Price\"\r\n                    rules={[\r\n                        {\r\n                            validator: checkPrice,\r\n                        },\r\n                    ]}>\r\n                    <PriceInput />\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SellerProductPrice;\r\n"]},"metadata":{},"sourceType":"module"}