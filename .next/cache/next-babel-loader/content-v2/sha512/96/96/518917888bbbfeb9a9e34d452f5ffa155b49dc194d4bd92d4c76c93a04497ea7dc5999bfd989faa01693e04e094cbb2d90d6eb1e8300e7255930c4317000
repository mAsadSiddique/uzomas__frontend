{"ast":null,"code":"import { InjectedConnector } from '@web3-react/injected-connector'; // import { FortmaticConnector } from '@web3-react/fortmatic-connector'\n\nimport fortmatic from 'fortmatic'; // import PortisConnect from '@portis/web3';\n\nimport { TorusConnector } from '@web3-react/torus-connector'; // import { PortisConnector } from '@web3-react/portis-connector';\n\nimport { AuthereumConnector } from '@web3-react/authereum-connector';\nimport { TrezorConnector } from '@web3-react/trezor-connector';\nimport { FortmaticConnector } from '@web3-react/fortmatic-connector'; // import { SquarelinkConnector } from '@web3-react/squarelink-connector';\n\nimport { LedgerConnector } from '@web3-react/ledger-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport config from '../config/config'; // const squarelink = require('squarelink');\n// const defaultNetwork = 1;\n\nconst NETWORK_URL = 'https://mainnet.infura.io/v3/4bf032f2d38a4ed6bb975b80d6340847';\nexport const Fortmatic = new FortmaticConnector({\n  apiKey: config.fortmaticKey,\n  chainId: config.chainId\n});\nFortmatic.fortmatic = new fortmatic(config.fortmaticKey);\nexport const WalletConnect = new WalletConnectConnector({\n  rpc: {\n    1: NETWORK_URL[`${config.chainId}`]\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 1200\n});\nexport const Injected = new InjectedConnector({\n  supportedChainIds: config.chainIds ? config.chainIds : [config.chainId]\n});\nexport const Torus = new TorusConnector({\n  chainId: config.chainId\n}); // // const fm = new Fortmatic(config.fortmaticKey);\n// console.log(config.fortmaticKey)\n// export const fortmatic = new FortmaticConnector({ apiKey: config.fortmaticKey, chainId: 1 })\n// fortmatic.fortmatic = fm;\n// export const Fortmatic = new FortmaticConnector({\n//   apiKey: config.fortmaticKey,\n//   logoutOnDeactivation: false,\n// });\n// const SquareLink = new SquarelinkConnector({\n//   clientId: config.squarelink_id,\n//   networks: config.squareLinkchainIds ? config.squareLinkchainIds : [config.chainId],\n// });\n// SquareLink.squarelink = new squarelink(config.squarelink_id);\n\nexport const Trezor = new TrezorConnector({\n  chainId: config.chainId,\n  url: NETWORK_URL[`${config.chainId}`],\n  pollingInterval: 1200,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n}); // export const Fortmatic = new FortmaticConnector({ apiKey: config.fortmaticKey, chainId: config.chainId });\n// Fortmatic.fortmatic = new fortmatic(config.fortmaticKey);\n\nexport const Ledger = new LedgerConnector({\n  chainId: config.chainId,\n  url: NETWORK_URL[`${config.chainId}`],\n  pollingInterval: 1200\n}); // const Portis = new PortisConnector({\n//   dAppId: config.portisKey,\n//   networks: [config.chainId],\n// });\n// Portis.portis = new PortisConnect(config.portisKey, config.chainName);\n\nexport const Authereum = new AuthereumConnector({\n  chainId: config.chainId\n}); // const Ledger = new LedgerConnector();\n\nexport default {\n  Injected,\n  Fortmatic,\n  // Portis,\n  Ledger,\n  Trezor,\n  Torus,\n  Authereum,\n  WalletConnect // SquareLink,\n\n};","map":{"version":3,"sources":["/home/itxnaeem/f-w/market-luxery-leader/components/partials/account/walletConnectors.jsx"],"names":["InjectedConnector","fortmatic","TorusConnector","AuthereumConnector","TrezorConnector","FortmaticConnector","LedgerConnector","WalletConnectConnector","config","NETWORK_URL","Fortmatic","apiKey","fortmaticKey","chainId","WalletConnect","rpc","bridge","qrcode","pollingInterval","Injected","supportedChainIds","chainIds","Torus","Trezor","url","manifestEmail","manifestAppUrl","Ledger","Authereum"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,gCAAlC,C,CACA;;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CACA;;AACA,SAASC,cAAT,QAA+B,6BAA/B,C,CACA;;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,kBAAT,QAAmC,iCAAnC,C,CACA;;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,sBAAT,QAAuC,qCAAvC;AACA,OAAOC,MAAP,MAAmB,kBAAnB,C,CAEA;AAEA;;AAEA,MAAMC,WAAW,GAAG,+DAApB;AAEA,OAAO,MAAMC,SAAS,GAAG,IAAIL,kBAAJ,CAAuB;AAAEM,EAAAA,MAAM,EAAEH,MAAM,CAACI,YAAjB;AAA+BC,EAAAA,OAAO,EAAEL,MAAM,CAACK;AAA/C,CAAvB,CAAlB;AACPH,SAAS,CAACT,SAAV,GAAsB,IAAIA,SAAJ,CAAcO,MAAM,CAACI,YAArB,CAAtB;AAEA,OAAO,MAAME,aAAa,GAAG,IAAIP,sBAAJ,CAA2B;AACtDQ,EAAAA,GAAG,EAAE;AAAE,OAAGN,WAAW,CAAE,GAAED,MAAM,CAACK,OAAQ,EAAnB;AAAhB,GADiD;AAEtDG,EAAAA,MAAM,EAAE,kCAF8C;AAGtDC,EAAAA,MAAM,EAAE,IAH8C;AAItDC,EAAAA,eAAe,EAAE;AAJqC,CAA3B,CAAtB;AAOP,OAAO,MAAMC,QAAQ,GAAG,IAAInB,iBAAJ,CAAsB;AAC5CoB,EAAAA,iBAAiB,EAAEZ,MAAM,CAACa,QAAP,GAAkBb,MAAM,CAACa,QAAzB,GAAoC,CAACb,MAAM,CAACK,OAAR;AADX,CAAtB,CAAjB;AAIP,OAAO,MAAMS,KAAK,GAAG,IAAIpB,cAAJ,CAAmB;AAAEW,EAAAA,OAAO,EAAEL,MAAM,CAACK;AAAlB,CAAnB,CAAd,C,CACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMU,MAAM,GAAG,IAAInB,eAAJ,CAAoB;AACxCS,EAAAA,OAAO,EAAEL,MAAM,CAACK,OADwB;AAExCW,EAAAA,GAAG,EAAEf,WAAW,CAAE,GAAED,MAAM,CAACK,OAAQ,EAAnB,CAFwB;AAGxCK,EAAAA,eAAe,EAAE,IAHuB;AAIxCO,EAAAA,aAAa,EAAE,eAJyB;AAKxCC,EAAAA,cAAc,EAAE;AALwB,CAApB,CAAf,C,CAOP;AACA;;AAEA,OAAO,MAAMC,MAAM,GAAG,IAAIrB,eAAJ,CAAoB;AACxCO,EAAAA,OAAO,EAAEL,MAAM,CAACK,OADwB;AAExCW,EAAAA,GAAG,EAAEf,WAAW,CAAE,GAAED,MAAM,CAACK,OAAQ,EAAnB,CAFwB;AAGxCK,EAAAA,eAAe,EAAE;AAHuB,CAApB,CAAf,C,CAMP;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMU,SAAS,GAAG,IAAIzB,kBAAJ,CAAuB;AAAEU,EAAAA,OAAO,EAAEL,MAAM,CAACK;AAAlB,CAAvB,CAAlB,C,CAEP;;AACA,eAAe;AACbM,EAAAA,QADa;AAEbT,EAAAA,SAFa;AAGb;AACAiB,EAAAA,MAJa;AAKbJ,EAAAA,MALa;AAMbD,EAAAA,KANa;AAObM,EAAAA,SAPa;AAQbd,EAAAA,aARa,CASb;;AATa,CAAf","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector';\n// import { FortmaticConnector } from '@web3-react/fortmatic-connector'\nimport fortmatic from 'fortmatic';\n// import PortisConnect from '@portis/web3';\nimport { TorusConnector } from '@web3-react/torus-connector';\n// import { PortisConnector } from '@web3-react/portis-connector';\nimport { AuthereumConnector } from '@web3-react/authereum-connector';\nimport { TrezorConnector } from '@web3-react/trezor-connector';\nimport { FortmaticConnector } from '@web3-react/fortmatic-connector';\n// import { SquarelinkConnector } from '@web3-react/squarelink-connector';\nimport { LedgerConnector } from '@web3-react/ledger-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport config from '../config/config';\n\n// const squarelink = require('squarelink');\n\n// const defaultNetwork = 1;\n\nconst NETWORK_URL = 'https://mainnet.infura.io/v3/4bf032f2d38a4ed6bb975b80d6340847'\n\nexport const Fortmatic = new FortmaticConnector({ apiKey: config.fortmaticKey, chainId: config.chainId });\nFortmatic.fortmatic = new fortmatic(config.fortmaticKey);\n\nexport const WalletConnect = new WalletConnectConnector({\n  rpc: { 1: NETWORK_URL[`${config.chainId}`] },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 1200,\n});\n\nexport const Injected = new InjectedConnector({\n  supportedChainIds: config.chainIds ? config.chainIds : [config.chainId],\n});\n\nexport const Torus = new TorusConnector({ chainId: config.chainId });\n// // const fm = new Fortmatic(config.fortmaticKey);\n// console.log(config.fortmaticKey)\n// export const fortmatic = new FortmaticConnector({ apiKey: config.fortmaticKey, chainId: 1 })\n// fortmatic.fortmatic = fm;\n// export const Fortmatic = new FortmaticConnector({\n//   apiKey: config.fortmaticKey,\n//   logoutOnDeactivation: false,\n// });\n// const SquareLink = new SquarelinkConnector({\n//   clientId: config.squarelink_id,\n//   networks: config.squareLinkchainIds ? config.squareLinkchainIds : [config.chainId],\n// });\n// SquareLink.squarelink = new squarelink(config.squarelink_id);\n\nexport const Trezor = new TrezorConnector({\n  chainId: config.chainId,\n  url: NETWORK_URL[`${config.chainId}`],\n  pollingInterval: 1200,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234',\n});\n// export const Fortmatic = new FortmaticConnector({ apiKey: config.fortmaticKey, chainId: config.chainId });\n// Fortmatic.fortmatic = new fortmatic(config.fortmaticKey);\n\nexport const Ledger = new LedgerConnector({\n  chainId: config.chainId,\n  url: NETWORK_URL[`${config.chainId}`],\n  pollingInterval: 1200,\n});\n\n// const Portis = new PortisConnector({\n//   dAppId: config.portisKey,\n//   networks: [config.chainId],\n// });\n// Portis.portis = new PortisConnect(config.portisKey, config.chainName);\n\nexport const Authereum = new AuthereumConnector({ chainId: config.chainId });\n\n// const Ledger = new LedgerConnector();\nexport default {\n  Injected,\n  Fortmatic,\n  // Portis,\n  Ledger,\n  Trezor,\n  Torus,\n  Authereum,\n  WalletConnect,\n  // SquareLink,\n};\n"]},"metadata":{},"sourceType":"module"}