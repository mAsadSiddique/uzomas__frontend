{"ast":null,"code":"import Repository, { basePostUrl, serializeQuery } from './Repository';\n\nclass PostRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async getPosts(payload) {\n    const endPoint = `posts?${serializeQuery(payload)}`;\n    const reponse = await Repository.get(`${basePostUrl}/${endPoint}`).then(response => {\n      if (response.data.length > 0) {\n        return response.data;\n      } else {\n        return null;\n      }\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getPostBySlug(payload) {\n    const reponse = await Repository.get(`${basePostUrl}/posts?slug=${payload}`).then(response => {\n      if (response.data.length > 0) {\n        return response.data[0];\n      } else {\n        return null;\n      }\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getPostsByCollectionSlug(payload) {\n    const endPoint = `collections?${serializeQuery(payload)}`;\n    const reponse = await Repository.get(`${basePostUrl}/${endPoint}`).then(response => {\n      if (response.data && response.data[0].posts.length > 0) {\n        return response.data[0].posts;\n      } else {\n        return null;\n      }\n    }).catch(error => {\n      console.log(JSON.stringify(error));\n      return null;\n    });\n    return reponse;\n  }\n\n  async getPostItemsByKeyword(payload) {\n    const reponse = await Repository.get(`${basePostUrl}/posts?title_contains=${payload}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getPostItemsByCategory(payload) {\n    const reponse = await Repository.get(`${basePostUrl}/posts?title_contains=${payload}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new PostRepository();","map":{"version":3,"sources":["F:/UZOMOS PROJECT/uzomas_frontend/repositories/PostRepository.js"],"names":["Repository","basePostUrl","serializeQuery","PostRepository","constructor","callback","getPosts","payload","endPoint","reponse","get","then","response","data","length","catch","error","JSON","stringify","getPostBySlug","getPostsByCollectionSlug","posts","console","log","getPostItemsByKeyword","getPostItemsByCategory"],"mappings":"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","sourcesContent":["import Repository, { basePostUrl, serializeQuery } from './Repository';\r\n\r\nclass PostRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    async getPosts(payload) {\r\n        const endPoint = `posts?${serializeQuery(payload)}`;\r\n        const reponse = await Repository.get(`${basePostUrl}/${endPoint}`)\r\n            .then((response) => {\r\n                if (response.data.length > 0) {\r\n                    return response.data;\r\n                } else {\r\n                    return null;\r\n                }\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getPostBySlug(payload) {\r\n        const reponse = await Repository.get(\r\n            `${basePostUrl}/posts?slug=${payload}`\r\n        )\r\n            .then((response) => {\r\n                if (response.data.length > 0) {\r\n                    return response.data[0];\r\n                } else {\r\n                    return null;\r\n                }\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getPostsByCollectionSlug(payload) {\r\n        const endPoint = `collections?${serializeQuery(payload)}`;\r\n        const reponse = await Repository.get(`${basePostUrl}/${endPoint}`)\r\n            .then((response) => {\r\n                if (response.data && response.data[0].posts.length > 0) {\r\n                    return response.data[0].posts;\r\n                } else {\r\n                    return null;\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(JSON.stringify(error));\r\n                return null;\r\n            });\r\n        return reponse;\r\n    }\r\n\r\n    async getPostItemsByKeyword(payload) {\r\n        const reponse = await Repository.get(\r\n            `${basePostUrl}/posts?title_contains=${payload}`\r\n        )\r\n            .then((response) => {\r\n                return response.data;\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getPostItemsByCategory(payload) {\r\n        const reponse = await Repository.get(\r\n            `${basePostUrl}/posts?title_contains=${payload}`\r\n        )\r\n            .then((response) => {\r\n                return response.data;\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n}\r\n\r\nexport default new PostRepository();\r\n"]},"metadata":{},"sourceType":"module"}