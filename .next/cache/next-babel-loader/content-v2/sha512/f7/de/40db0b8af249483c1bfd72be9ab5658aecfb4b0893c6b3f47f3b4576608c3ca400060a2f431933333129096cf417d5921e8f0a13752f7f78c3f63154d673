{"ast":null,"code":"import { InjectedConnector } from '@web3-react/injected-connector'; // import { FortmaticConnector } from '@web3-react/fortmatic-connector'\n\nimport fortmatic from 'fortmatic'; // import PortisConnect from '@portis/web3';\n\nimport { TorusConnector } from '@web3-react/torus-connector'; // import { PortisConnector } from '@web3-react/portis-connector';\n\nimport { AuthereumConnector } from '@web3-react/authereum-connector';\nimport { TrezorConnector } from '@web3-react/trezor-connector';\nimport { FortmaticConnector } from '@web3-react/fortmatic-connector'; // import { SquarelinkConnector } from '@web3-react/squarelink-connector';\n\nimport { LedgerConnector } from '@web3-react/ledger-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport config from '../config/config'; // const squarelink = require('squarelink');\n// const defaultNetwork = 1;\n\nvar supportedNetworkURLs = {\n  1: 'https://mainnet.infura.io/v3/60ab76e16df54c808e50a79975b4779f',\n  2: 'https://rinkeby.infura.io/v3/60ab76e16df54c808e50a79975b4779f',\n  42: 'https://kovan.infura.io/v3/60ab76e16df54c808e50a79975b4779f'\n};\nexport var WalletConnect = new WalletConnectConnector({\n  rpc: {\n    1: supportedNetworkURLs[\"\".concat(config.chainId)]\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 1200\n});\nvar Injected = new InjectedConnector({\n  supportedChainIds: config.chainIds ? config.chainIds : [config.chainId]\n});\nvar Torus = new TorusConnector({\n  chainId: config.chainId\n}); // // const fm = new Fortmatic(config.fortmaticKey);\n// console.log(config.fortmaticKey)\n// export const fortmatic = new FortmaticConnector({ apiKey: config.fortmaticKey, chainId: 1 })\n// fortmatic.fortmatic = fm;\n// export const Fortmatic = new FortmaticConnector({\n//   api: FortmaticApi,\n//   apiKey: config.fortmaticKey,\n//   logoutOnDeactivation: false,\n// });\n// const SquareLink = new SquarelinkConnector({\n//   clientId: config.squarelink_id,\n//   networks: config.squareLinkchainIds ? config.squareLinkchainIds : [config.chainId],\n// });\n// SquareLink.squarelink = new squarelink(config.squarelink_id);\n\nvar Trezor = new TrezorConnector({\n  chainId: config.chainId,\n  url: supportedNetworkURLs[\"\".concat(config.chainId)],\n  pollingInterval: 1200,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n}); // export const Fortmatic = new FortmaticConnector({ apiKey: config.fortmaticKey, chainId: config.chainId });\n// Fortmatic.fortmatic = new fortmatic(config.fortmaticKey);\n\nvar Ledger = new LedgerConnector({\n  chainId: config.chainId,\n  url: supportedNetworkURLs[\"\".concat(config.chainId)],\n  pollingInterval: 1200\n}); // const Portis = new PortisConnector({\n//   dAppId: config.portisKey,\n//   networks: [config.chainId],\n// });\n// Portis.portis = new PortisConnect(config.portisKey, config.chainName);\n\nvar Authereum = new AuthereumConnector({\n  chainId: config.chainId\n}); // const Ledger = new LedgerConnector();\n\nexport default {\n  Injected: Injected,\n  // Fortmatic,\n  // Portis,\n  Ledger: Ledger,\n  Trezor: Trezor,\n  Torus: Torus,\n  Authereum: Authereum,\n  WalletConnect: WalletConnect // SquareLink,\n\n};","map":{"version":3,"sources":["/home/naeem/f-w/market-luxery-leader/components/partials/account/walletConnectors.jsx"],"names":["InjectedConnector","fortmatic","TorusConnector","AuthereumConnector","TrezorConnector","FortmaticConnector","LedgerConnector","WalletConnectConnector","config","supportedNetworkURLs","WalletConnect","rpc","chainId","bridge","qrcode","pollingInterval","Injected","supportedChainIds","chainIds","Torus","Trezor","url","manifestEmail","manifestAppUrl","Ledger","Authereum"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,gCAAlC,C,CACA;;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CACA;;AACA,SAASC,cAAT,QAA+B,6BAA/B,C,CACA;;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,kBAAT,QAAmC,iCAAnC,C,CACA;;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,sBAAT,QAAuC,qCAAvC;AACA,OAAOC,MAAP,MAAmB,kBAAnB,C,CAEA;AAEA;;AACA,IAAMC,oBAAoB,GAAG;AAC3B,KAAG,+DADwB;AAE3B,KAAG,+DAFwB;AAG3B,MAAI;AAHuB,CAA7B;AAMA,OAAO,IAAMC,aAAa,GAAG,IAAIH,sBAAJ,CAA2B;AACtDI,EAAAA,GAAG,EAAE;AAAE,OAAGF,oBAAoB,WAAID,MAAM,CAACI,OAAX;AAAzB,GADiD;AAEtDC,EAAAA,MAAM,EAAE,kCAF8C;AAGtDC,EAAAA,MAAM,EAAE,IAH8C;AAItDC,EAAAA,eAAe,EAAE;AAJqC,CAA3B,CAAtB;AAOP,IAAMC,QAAQ,GAAG,IAAIhB,iBAAJ,CAAsB;AACrCiB,EAAAA,iBAAiB,EAAET,MAAM,CAACU,QAAP,GAAkBV,MAAM,CAACU,QAAzB,GAAoC,CAACV,MAAM,CAACI,OAAR;AADlB,CAAtB,CAAjB;AAIA,IAAMO,KAAK,GAAG,IAAIjB,cAAJ,CAAmB;AAAEU,EAAAA,OAAO,EAAEJ,MAAM,CAACI;AAAlB,CAAnB,CAAd,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMQ,MAAM,GAAG,IAAIhB,eAAJ,CAAoB;AACjCQ,EAAAA,OAAO,EAAEJ,MAAM,CAACI,OADiB;AAEjCS,EAAAA,GAAG,EAAEZ,oBAAoB,WAAID,MAAM,CAACI,OAAX,EAFQ;AAGjCG,EAAAA,eAAe,EAAE,IAHgB;AAIjCO,EAAAA,aAAa,EAAE,eAJkB;AAKjCC,EAAAA,cAAc,EAAE;AALiB,CAApB,CAAf,C,CAOA;AACA;;AAEA,IAAMC,MAAM,GAAG,IAAIlB,eAAJ,CAAoB;AACjCM,EAAAA,OAAO,EAAEJ,MAAM,CAACI,OADiB;AAEjCS,EAAAA,GAAG,EAAEZ,oBAAoB,WAAID,MAAM,CAACI,OAAX,EAFQ;AAGjCG,EAAAA,eAAe,EAAE;AAHgB,CAApB,CAAf,C,CAMA;AACA;AACA;AACA;AACA;;AAEA,IAAMU,SAAS,GAAG,IAAItB,kBAAJ,CAAuB;AAAES,EAAAA,OAAO,EAAEJ,MAAM,CAACI;AAAlB,CAAvB,CAAlB,C,CAEA;;AACA,eAAe;AACbI,EAAAA,QAAQ,EAARA,QADa;AAEb;AACA;AACAQ,EAAAA,MAAM,EAANA,MAJa;AAKbJ,EAAAA,MAAM,EAANA,MALa;AAMbD,EAAAA,KAAK,EAALA,KANa;AAObM,EAAAA,SAAS,EAATA,SAPa;AAQbf,EAAAA,aAAa,EAAbA,aARa,CASb;;AATa,CAAf","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector';\n// import { FortmaticConnector } from '@web3-react/fortmatic-connector'\nimport fortmatic from 'fortmatic';\n// import PortisConnect from '@portis/web3';\nimport { TorusConnector } from '@web3-react/torus-connector';\n// import { PortisConnector } from '@web3-react/portis-connector';\nimport { AuthereumConnector } from '@web3-react/authereum-connector';\nimport { TrezorConnector } from '@web3-react/trezor-connector';\nimport { FortmaticConnector } from '@web3-react/fortmatic-connector';\n// import { SquarelinkConnector } from '@web3-react/squarelink-connector';\nimport { LedgerConnector } from '@web3-react/ledger-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport config from '../config/config';\n\n// const squarelink = require('squarelink');\n\n// const defaultNetwork = 1;\nconst supportedNetworkURLs = {\n  1: 'https://mainnet.infura.io/v3/60ab76e16df54c808e50a79975b4779f',\n  2: 'https://rinkeby.infura.io/v3/60ab76e16df54c808e50a79975b4779f',\n  42: 'https://kovan.infura.io/v3/60ab76e16df54c808e50a79975b4779f',\n};\n\nexport const WalletConnect = new WalletConnectConnector({\n  rpc: { 1: supportedNetworkURLs[`${config.chainId}`] },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 1200,\n});\n\nconst Injected = new InjectedConnector({\n  supportedChainIds: config.chainIds ? config.chainIds : [config.chainId],\n});\n\nconst Torus = new TorusConnector({ chainId: config.chainId });\n// // const fm = new Fortmatic(config.fortmaticKey);\n// console.log(config.fortmaticKey)\n// export const fortmatic = new FortmaticConnector({ apiKey: config.fortmaticKey, chainId: 1 })\n// fortmatic.fortmatic = fm;\n// export const Fortmatic = new FortmaticConnector({\n//   api: FortmaticApi,\n//   apiKey: config.fortmaticKey,\n//   logoutOnDeactivation: false,\n// });\n// const SquareLink = new SquarelinkConnector({\n//   clientId: config.squarelink_id,\n//   networks: config.squareLinkchainIds ? config.squareLinkchainIds : [config.chainId],\n// });\n// SquareLink.squarelink = new squarelink(config.squarelink_id);\n\nconst Trezor = new TrezorConnector({\n  chainId: config.chainId,\n  url: supportedNetworkURLs[`${config.chainId}`],\n  pollingInterval: 1200,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234',\n});\n// export const Fortmatic = new FortmaticConnector({ apiKey: config.fortmaticKey, chainId: config.chainId });\n// Fortmatic.fortmatic = new fortmatic(config.fortmaticKey);\n\nconst Ledger = new LedgerConnector({\n  chainId: config.chainId,\n  url: supportedNetworkURLs[`${config.chainId}`],\n  pollingInterval: 1200,\n});\n\n// const Portis = new PortisConnector({\n//   dAppId: config.portisKey,\n//   networks: [config.chainId],\n// });\n// Portis.portis = new PortisConnect(config.portisKey, config.chainName);\n\nconst Authereum = new AuthereumConnector({ chainId: config.chainId });\n\n// const Ledger = new LedgerConnector();\nexport default {\n  Injected,\n  // Fortmatic,\n  // Portis,\n  Ledger,\n  Trezor,\n  Torus,\n  Authereum,\n  WalletConnect,\n  // SquareLink,\n};\n"]},"metadata":{},"sourceType":"module"}