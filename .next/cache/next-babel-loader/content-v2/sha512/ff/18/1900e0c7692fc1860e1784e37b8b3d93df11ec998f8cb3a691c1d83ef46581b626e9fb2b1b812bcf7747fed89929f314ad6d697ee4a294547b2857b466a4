{"ast":null,"code":"import _regeneratorRuntime from \"F:/UZOMOS PROJECT/uzomas_frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"F:/UZOMOS PROJECT/uzomas_frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"F:/UZOMOS PROJECT/uzomas_frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:/UZOMOS PROJECT/uzomas_frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Repository, { basePostUrl, serializeQuery } from './Repository';\n\nvar PostRepository = /*#__PURE__*/function () {\n  function PostRepository(callback) {\n    _classCallCheck(this, PostRepository);\n\n    this.callback = callback;\n  }\n\n  _createClass(PostRepository, [{\n    key: \"getPosts\",\n    value: function () {\n      var _getPosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(payload) {\n        var endPoint, reponse;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                endPoint = \"posts?\".concat(serializeQuery(payload));\n                _context.next = 3;\n                return Repository.get(\"\".concat(basePostUrl, \"/\").concat(endPoint)).then(function (response) {\n                  if (response.data.length > 0) {\n                    return response.data;\n                  } else {\n                    return null;\n                  }\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 3:\n                reponse = _context.sent;\n                return _context.abrupt(\"return\", reponse);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getPosts(_x) {\n        return _getPosts.apply(this, arguments);\n      }\n\n      return getPosts;\n    }()\n  }, {\n    key: \"getPostBySlug\",\n    value: function () {\n      var _getPostBySlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(payload) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Repository.get(\"\".concat(basePostUrl, \"/posts?slug=\").concat(payload)).then(function (response) {\n                  if (response.data.length > 0) {\n                    return response.data[0];\n                  } else {\n                    return null;\n                  }\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context2.sent;\n                return _context2.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getPostBySlug(_x2) {\n        return _getPostBySlug.apply(this, arguments);\n      }\n\n      return getPostBySlug;\n    }()\n  }, {\n    key: \"getPostsByCollectionSlug\",\n    value: function () {\n      var _getPostsByCollectionSlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload) {\n        var endPoint, reponse;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                endPoint = \"collections?\".concat(serializeQuery(payload));\n                _context3.next = 3;\n                return Repository.get(\"\".concat(basePostUrl, \"/\").concat(endPoint)).then(function (response) {\n                  if (response.data && response.data[0].posts.length > 0) {\n                    return response.data[0].posts;\n                  } else {\n                    return null;\n                  }\n                })[\"catch\"](function (error) {\n                  console.log(JSON.stringify(error));\n                  return null;\n                });\n\n              case 3:\n                reponse = _context3.sent;\n                return _context3.abrupt(\"return\", reponse);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getPostsByCollectionSlug(_x3) {\n        return _getPostsByCollectionSlug.apply(this, arguments);\n      }\n\n      return getPostsByCollectionSlug;\n    }()\n  }, {\n    key: \"getPostItemsByKeyword\",\n    value: function () {\n      var _getPostItemsByKeyword = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(payload) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return Repository.get(\"\".concat(basePostUrl, \"/posts?title_contains=\").concat(payload)).then(function (response) {\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context4.sent;\n                return _context4.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getPostItemsByKeyword(_x4) {\n        return _getPostItemsByKeyword.apply(this, arguments);\n      }\n\n      return getPostItemsByKeyword;\n    }()\n  }, {\n    key: \"getPostItemsByCategory\",\n    value: function () {\n      var _getPostItemsByCategory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(payload) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return Repository.get(\"\".concat(basePostUrl, \"/posts?title_contains=\").concat(payload)).then(function (response) {\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context5.sent;\n                return _context5.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function getPostItemsByCategory(_x5) {\n        return _getPostItemsByCategory.apply(this, arguments);\n      }\n\n      return getPostItemsByCategory;\n    }()\n  }]);\n\n  return PostRepository;\n}();\n\nexport default new PostRepository();","map":{"version":3,"sources":["F:/UZOMOS PROJECT/uzomas_frontend/repositories/PostRepository.js"],"names":["Repository","basePostUrl","serializeQuery","PostRepository","callback","payload","endPoint","get","then","response","data","length","error","JSON","stringify","reponse","posts","console","log"],"mappings":";;;;AAAA,OAAOA,UAAP,IAAqBC,WAArB,EAAkCC,cAAlC,QAAwD,cAAxD;;IAEMC,c;AACF,0BAAYC,QAAZ,EAAsB;AAAA;;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;;;;gGAEcC,O;;;;;;AACLC,gBAAAA,Q,mBAAoBJ,cAAc,CAACG,OAAD,C;;uBAClBL,UAAU,CAACO,GAAX,WAAkBN,WAAlB,cAAiCK,QAAjC,GACjBE,IADiB,CACZ,UAACC,QAAD,EAAc;AAChB,sBAAIA,QAAQ,CAACC,IAAT,CAAcC,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,2BAAOF,QAAQ,CAACC,IAAhB;AACH,mBAFD,MAEO;AACH,2BAAO,IAAP;AACH;AACJ,iBAPiB,WAQX,UAACE,KAAD;AAAA,yBAAY;AAAEA,oBAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,mBAAZ;AAAA,iBARW,C;;;AAAhBG,gBAAAA,O;iDASCA,O;;;;;;;;;;;;;;;;;;;sGAGSV,O;;;;;;;uBACML,UAAU,CAACO,GAAX,WACfN,WADe,yBACWI,OADX,GAGjBG,IAHiB,CAGZ,UAACC,QAAD,EAAc;AAChB,sBAAIA,QAAQ,CAACC,IAAT,CAAcC,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,2BAAOF,QAAQ,CAACC,IAAT,CAAc,CAAd,CAAP;AACH,mBAFD,MAEO;AACH,2BAAO,IAAP;AACH;AACJ,iBATiB,WAUX,UAACE,KAAD;AAAA,yBAAY;AAAEA,oBAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,mBAAZ;AAAA,iBAVW,C;;;AAAhBG,gBAAAA,O;kDAWCA,O;;;;;;;;;;;;;;;;;;;iHAGoBV,O;;;;;;AACrBC,gBAAAA,Q,yBAA0BJ,cAAc,CAACG,OAAD,C;;uBACxBL,UAAU,CAACO,GAAX,WAAkBN,WAAlB,cAAiCK,QAAjC,GACjBE,IADiB,CACZ,UAACC,QAAD,EAAc;AAChB,sBAAIA,QAAQ,CAACC,IAAT,IAAiBD,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAiBM,KAAjB,CAAuBL,MAAvB,GAAgC,CAArD,EAAwD;AACpD,2BAAOF,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAiBM,KAAxB;AACH,mBAFD,MAEO;AACH,2BAAO,IAAP;AACH;AACJ,iBAPiB,WAQX,UAACJ,KAAD,EAAW;AACdK,kBAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACC,SAAL,CAAeF,KAAf,CAAZ;AACA,yBAAO,IAAP;AACH,iBAXiB,C;;;AAAhBG,gBAAAA,O;kDAYCA,O;;;;;;;;;;;;;;;;;;;8GAGiBV,O;;;;;;;uBACFL,UAAU,CAACO,GAAX,WACfN,WADe,mCACqBI,OADrB,GAGjBG,IAHiB,CAGZ,UAACC,QAAD,EAAc;AAChB,yBAAOA,QAAQ,CAACC,IAAhB;AACH,iBALiB,WAMX,UAACE,KAAD;AAAA,yBAAY;AAAEA,oBAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,mBAAZ;AAAA,iBANW,C;;;AAAhBG,gBAAAA,O;kDAOCA,O;;;;;;;;;;;;;;;;;;;+GAGkBV,O;;;;;;;uBACHL,UAAU,CAACO,GAAX,WACfN,WADe,mCACqBI,OADrB,GAGjBG,IAHiB,CAGZ,UAACC,QAAD,EAAc;AAChB,yBAAOA,QAAQ,CAACC,IAAhB;AACH,iBALiB,WAMX,UAACE,KAAD;AAAA,yBAAY;AAAEA,oBAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,mBAAZ;AAAA,iBANW,C;;;AAAhBG,gBAAAA,O;kDAOCA,O;;;;;;;;;;;;;;;;;;;;;AAIf,eAAe,IAAIZ,cAAJ,EAAf","sourcesContent":["import Repository, { basePostUrl, serializeQuery } from './Repository';\r\n\r\nclass PostRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    async getPosts(payload) {\r\n        const endPoint = `posts?${serializeQuery(payload)}`;\r\n        const reponse = await Repository.get(`${basePostUrl}/${endPoint}`)\r\n            .then((response) => {\r\n                if (response.data.length > 0) {\r\n                    return response.data;\r\n                } else {\r\n                    return null;\r\n                }\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getPostBySlug(payload) {\r\n        const reponse = await Repository.get(\r\n            `${basePostUrl}/posts?slug=${payload}`\r\n        )\r\n            .then((response) => {\r\n                if (response.data.length > 0) {\r\n                    return response.data[0];\r\n                } else {\r\n                    return null;\r\n                }\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getPostsByCollectionSlug(payload) {\r\n        const endPoint = `collections?${serializeQuery(payload)}`;\r\n        const reponse = await Repository.get(`${basePostUrl}/${endPoint}`)\r\n            .then((response) => {\r\n                if (response.data && response.data[0].posts.length > 0) {\r\n                    return response.data[0].posts;\r\n                } else {\r\n                    return null;\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(JSON.stringify(error));\r\n                return null;\r\n            });\r\n        return reponse;\r\n    }\r\n\r\n    async getPostItemsByKeyword(payload) {\r\n        const reponse = await Repository.get(\r\n            `${basePostUrl}/posts?title_contains=${payload}`\r\n        )\r\n            .then((response) => {\r\n                return response.data;\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getPostItemsByCategory(payload) {\r\n        const reponse = await Repository.get(\r\n            `${basePostUrl}/posts?title_contains=${payload}`\r\n        )\r\n            .then((response) => {\r\n                return response.data;\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n}\r\n\r\nexport default new PostRepository();\r\n"]},"metadata":{},"sourceType":"module"}