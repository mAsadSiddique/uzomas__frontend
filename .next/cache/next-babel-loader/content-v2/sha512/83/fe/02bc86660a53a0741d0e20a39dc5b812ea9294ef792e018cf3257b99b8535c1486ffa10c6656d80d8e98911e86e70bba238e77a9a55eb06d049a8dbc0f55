{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { Form, Input, Select, Button } from 'antd';\nconst {\n  Option\n} = Select;\n\nconst PriceInput = ({\n  value = {},\n  onChange\n}) => {\n  const {\n    0: number,\n    1: setNumber\n  } = useState(0);\n  const {\n    0: currency,\n    1: setCurrency\n  } = useState('usd');\n\n  const triggerChange = changedValue => {\n    onChange === null || onChange === void 0 ? void 0 : onChange(_objectSpread(_objectSpread({\n      number,\n      currency\n    }, value), changedValue));\n  };\n\n  const onNumberChange = e => {\n    const newNumber = parseInt(e.target.value || '0', 10);\n\n    if (Number.isNaN(number)) {\n      return;\n    }\n\n    if (!('number' in value)) {\n      setNumber(newNumber);\n    }\n\n    triggerChange({\n      number: newNumber\n    });\n  };\n\n  const onCurrencyChange = newCurrency => {\n    if (!('currency' in value)) {\n      setCurrency(newCurrency);\n    }\n\n    triggerChange({\n      currency: newCurrency\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(\"span\", {\n    children: [/*#__PURE__*/_jsx(Input, {\n      type: \"text\",\n      value: value.number || number,\n      onChange: onNumberChange,\n      style: {\n        width: 100\n      }\n    }), /*#__PURE__*/_jsx(Select, {\n      value: value.currency || currency,\n      style: {\n        width: 80,\n        margin: '0 8px'\n      },\n      onChange: onCurrencyChange,\n      children: /*#__PURE__*/_jsx(Option, {\n        value: \"dollar\",\n        children: \"USD\"\n      })\n    })]\n  });\n};\n\nconst SellerProductPrice = () => {\n  const onFinish = values => {\n    console.log('Received values from form: ', values);\n  };\n\n  const checkPrice = (_, value) => {\n    if (value.number > 0) {\n      return Promise.resolve();\n    }\n\n    return Promise.reject(new Error('Price must be greater than zero!'));\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(Form, {\n      name: \"customized_form_controls\",\n      layout: \"inline\",\n      onFinish: onFinish,\n      initialValues: {\n        price: {\n          number: 0,\n          currency: 'USD'\n        }\n      },\n      children: /*#__PURE__*/_jsx(Form.Item, {\n        name: \"price\",\n        label: \"Product Price\",\n        rules: [{\n          required: true\n        }],\n        children: /*#__PURE__*/_jsx(PriceInput, {})\n      })\n    })\n  });\n};\n\nexport default SellerProductPrice;","map":null,"metadata":{},"sourceType":"module"}