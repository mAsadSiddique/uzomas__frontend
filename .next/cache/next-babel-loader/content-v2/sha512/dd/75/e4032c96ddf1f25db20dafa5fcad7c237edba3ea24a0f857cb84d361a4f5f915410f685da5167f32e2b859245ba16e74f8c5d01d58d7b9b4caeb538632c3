{"ast":null,"code":"import { InjectedConnector } from '@web3-react/injected-connector'; // import { FortmaticConnector } from '@web3-react/fortmatic-connector'\n\nimport fortmatic from 'fortmatic'; // import PortisConnect from '@portis/web3';\n\nimport { TorusConnector } from '@web3-react/torus-connector'; // import { PortisConnector } from '@web3-react/portis-connector';\n\nimport { AuthereumConnector } from '@web3-react/authereum-connector';\nimport { TrezorConnector } from '@web3-react/trezor-connector';\nimport { FortmaticConnector } from '@web3-react/fortmatic-connector'; // import { SquarelinkConnector } from '@web3-react/squarelink-connector';\n\nimport { LedgerConnector } from '@web3-react/ledger-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport config from '../config/config'; // const squarelink = require('squarelink');\n// const defaultNetwork = 1;\n\nconst NETWORK_URL = 'https://mainnet.infura.io/v3/4bf032f2d38a4ed6bb975b80d6340847';\nexport const Fortmatic = new FortmaticConnector({\n  apiKey: config.fortmaticKey,\n  chainId: config.chainId\n});\nFortmatic.fortmatic = new fortmatic(config.fortmaticKey);\nexport const WalletConnect = new WalletConnectConnector({\n  rpc: {\n    1: NETWORK_URL[`${config.chainId}`]\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 1200\n});\nexport const Injected = new InjectedConnector({\n  supportedChainIds: config.chainIds ? config.chainIds : [config.chainId]\n});\nexport const Torus = new TorusConnector({\n  chainId: config.chainId\n}); // // const fm = new Fortmatic(config.fortmaticKey);\n// console.log(config.fortmaticKey)\n// export const fortmatic = new FortmaticConnector({ apiKey: config.fortmaticKey, chainId: 1 })\n// fortmatic.fortmatic = fm;\n// export const Fortmatic = new FortmaticConnector({\n//   apiKey: config.fortmaticKey,\n//   logoutOnDeactivation: false,\n// });\n// const SquareLink = new SquarelinkConnector({\n//   clientId: config.squarelink_id,\n//   networks: config.squareLinkchainIds ? config.squareLinkchainIds : [config.chainId],\n// });\n// SquareLink.squarelink = new squarelink(config.squarelink_id);\n\nexport const Trezor = new TrezorConnector({\n  chainId: config.chainId,\n  url: NETWORK_URL[`${config.chainId}`],\n  pollingInterval: 1200,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n}); // export const Fortmatic = new FortmaticConnector({ apiKey: config.fortmaticKey, chainId: config.chainId });\n// Fortmatic.fortmatic = new fortmatic(config.fortmaticKey);\n\nexport const Ledger = new LedgerConnector({\n  chainId: config.chainId,\n  url: NETWORK_URL[`${config.chainId}`],\n  pollingInterval: 1200\n}); // const Portis = new PortisConnector({\n//   dAppId: config.portisKey,\n//   networks: [config.chainId],\n// });\n// Portis.portis = new PortisConnect(config.portisKey, config.chainName);\n\nexport const Authereum = new AuthereumConnector({\n  chainId: config.chainId\n}); // const Ledger = new LedgerConnector();\n\nexport default {\n  Injected,\n  Fortmatic,\n  // Portis,\n  Ledger,\n  Trezor,\n  Torus,\n  Authereum,\n  WalletConnect // SquareLink,\n\n};","map":null,"metadata":{},"sourceType":"module"}