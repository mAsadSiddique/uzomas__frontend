{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"F:/UZOMOS PROJECT/uzomas_frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:/UZOMOS PROJECT/uzomas_frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"F:/UZOMOS PROJECT/uzomas_frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"F:/UZOMOS PROJECT/uzomas_frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:/UZOMOS PROJECT/uzomas_frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"F:\\\\UZOMOS PROJECT\\\\uzomas_frontend\\\\components\\\\partials\\\\account\\\\modules\\\\TableNotifications.jsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Table, Divider, Tag } from 'antd';\n\nvar TableNotifications = /*#__PURE__*/function (_Component) {\n  _inherits(TableNotifications, _Component);\n\n  var _super = _createSuper(TableNotifications);\n\n  function TableNotifications() {\n    _classCallCheck(this, TableNotifications);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TableNotifications, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      /* \r\n          You can change data by API\r\n          example: https://ant.design/components/table/\r\n      */\n      var tableData = [{\n        key: '1',\n        title: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor',\n        dateCreate: '20-1-2020',\n        tags: ['sale']\n      }, {\n        key: '2',\n        title: 'Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur',\n        dateCreate: '21-1-2020',\n        tags: ['new']\n      }, {\n        key: '3',\n        title: ' Et harum quidem rerum',\n        dateCreate: '21-1-2020',\n        tags: ['new']\n      }, {\n        key: '4',\n        title: 'Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet',\n        dateCreate: '21-1-2020',\n        tags: ['sale']\n      }];\n      var tableColumn = [{\n        title: 'Date Create',\n        dataIndex: 'dateCreate',\n        key: 'dateCreate',\n        render: function render(text) {\n          return /*#__PURE__*/_jsxDEV(\"a\", {\n            children: text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 33\n          }, _this);\n        },\n        width: '100px'\n      }, {\n        title: 'Title',\n        dataIndex: 'title',\n        key: 'title'\n      }, {\n        title: 'Category',\n        key: 'tags',\n        dataIndex: 'tags',\n        render: function render(tags) {\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            children: tags.map(function (tag) {\n              var color = tag.length > 5 ? 'geekblue' : 'green';\n\n              if (tag === 'sale') {\n                color = 'volcano';\n              }\n\n              return /*#__PURE__*/_jsxDEV(Tag, {\n                color: color,\n                children: tag.toUpperCase()\n              }, tag, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 33\n              }, _this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }, _this);\n        }\n      }, {\n        title: 'Action',\n        key: 'action',\n        width: '200px',\n        render: function render(text, record) {\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              children: [\"Mark as read \", record.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 25\n            }, _this), /*#__PURE__*/_jsxDEV(Divider, {\n              type: \"vertical\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 25\n            }, _this), /*#__PURE__*/_jsxDEV(\"a\", {\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 25\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }, _this);\n        }\n      }];\n      return /*#__PURE__*/_jsxDEV(Table, {\n        columns: tableColumn,\n        dataSource: tableData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 16\n      }, this);\n    }\n  }]);\n\n  return TableNotifications;\n}(Component);\n\nexport default TableNotifications;","map":{"version":3,"sources":["F:/UZOMOS PROJECT/uzomas_frontend/components/partials/account/modules/TableNotifications.jsx"],"names":["React","Component","Table","Divider","Tag","TableNotifications","tableData","key","title","dateCreate","tags","tableColumn","dataIndex","render","text","width","map","tag","color","length","toUpperCase","record","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Divider, Tag } from 'antd';\r\n\r\nclass TableNotifications extends Component {\r\n    render() {\r\n        /* \r\n            You can change data by API\r\n            example: https://ant.design/components/table/\r\n        */\r\n        const tableData = [\r\n            {\r\n                key: '1',\r\n                title:\r\n                    'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor',\r\n                dateCreate: '20-1-2020',\r\n                tags: ['sale'],\r\n            },\r\n            {\r\n                key: '2',\r\n                title:\r\n                    'Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur',\r\n                dateCreate: '21-1-2020',\r\n                tags: ['new'],\r\n            },\r\n            {\r\n                key: '3',\r\n                title: ' Et harum quidem rerum',\r\n                dateCreate: '21-1-2020',\r\n                tags: ['new'],\r\n            },\r\n            {\r\n                key: '4',\r\n                title:\r\n                    'Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet',\r\n                dateCreate: '21-1-2020',\r\n                tags: ['sale'],\r\n            },\r\n        ];\r\n        const tableColumn = [\r\n            {\r\n                title: 'Date Create',\r\n                dataIndex: 'dateCreate',\r\n                key: 'dateCreate',\r\n                render: text => <a>{text}</a>,\r\n                width: '100px',\r\n            },\r\n            {\r\n                title: 'Title',\r\n                dataIndex: 'title',\r\n                key: 'title',\r\n            },\r\n            {\r\n                title: 'Category',\r\n                key: 'tags',\r\n                dataIndex: 'tags',\r\n                render: tags => (\r\n                    <span>\r\n                        {tags.map(tag => {\r\n                            let color = tag.length > 5 ? 'geekblue' : 'green';\r\n                            if (tag === 'sale') {\r\n                                color = 'volcano';\r\n                            }\r\n                            return (\r\n                                <Tag color={color} key={tag}>\r\n                                    {tag.toUpperCase()}\r\n                                </Tag>\r\n                            );\r\n                        })}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                title: 'Action',\r\n                key: 'action',\r\n                width: '200px',\r\n                render: (text, record) => (\r\n                    <span>\r\n                        <a>Mark as read {record.name}</a>\r\n                        <Divider type=\"vertical\" />\r\n                        <a>Delete</a>\r\n                    </span>\r\n                ),\r\n            },\r\n        ];\r\n        return <Table columns={tableColumn} dataSource={tableData} />;\r\n    }\r\n}\r\n\r\nexport default TableNotifications;\r\n"]},"metadata":{},"sourceType":"module"}