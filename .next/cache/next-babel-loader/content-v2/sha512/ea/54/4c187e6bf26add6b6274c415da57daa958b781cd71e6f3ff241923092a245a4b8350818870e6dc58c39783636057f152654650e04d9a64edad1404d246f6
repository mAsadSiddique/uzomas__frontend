{"ast":null,"code":"import { InjectedConnector } from '@web3-react/injected-connector'; // import { FortmaticConnector } from '@web3-react/fortmatic-connector'\n// import fortmatic from 'fortmatic';\n// import PortisConnect from '@portis/web3';\n\nimport { TorusConnector } from '@web3-react/torus-connector'; // import { PortisConnector } from '@web3-react/portis-connector';\n\nimport { AuthereumConnector } from '@web3-react/authereum-connector';\nimport { TrezorConnector } from '@web3-react/trezor-connector';\nimport { FortmaticConnector } from '@web3-react/fortmatic-connector';\nimport { SquarelinkConnector } from '@web3-react/squarelink-connector';\nimport { LedgerConnector } from '@web3-react/ledger-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport config from '../config/config';\n\nconst squarelink = require('squarelink'); // const defaultNetwork = 1;\n\n\nconst supportedNetworkURLs = {\n  1: 'https://mainnet.infura.io/v3/60ab76e16df54c808e50a79975b4779f',\n  2: 'https://rinkeby.infura.io/v3/60ab76e16df54c808e50a79975b4779f',\n  42: 'https://kovan.infura.io/v3/60ab76e16df54c808e50a79975b4779f'\n};\nexport const WalletConnect = new WalletConnectConnector({\n  rpc: {\n    1: supportedNetworkURLs[`${config.chainId}`]\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 1200\n});\nconst Injected = new InjectedConnector({\n  supportedChainIds: config.chainIds ? config.chainIds : [config.chainId]\n});\nconst Torus = new TorusConnector({\n  chainId: config.chainId\n}); // // const fm = new Fortmatic(config.fortmaticKey);\n// console.log(config.fortmaticKey)\n// export const fortmatic = new FortmaticConnector({ apiKey: config.fortmaticKey, chainId: 1 })\n// fortmatic.fortmatic = fm;\n// export const Fortmatic = new FortmaticConnector({\n//   api: FortmaticApi,\n//   apiKey: config.fortmaticKey,\n//   logoutOnDeactivation: false,\n// });\n\nconst SquareLink = new SquarelinkConnector({\n  clientId: config.squarelink_id,\n  networks: config.squareLinkchainIds ? config.squareLinkchainIds : [config.chainId]\n});\nSquareLink.squarelink = new squarelink(config.squarelink_id);\nconst Trezor = new TrezorConnector({\n  chainId: config.chainId,\n  url: supportedNetworkURLs[`${config.chainId}`],\n  pollingInterval: 1200,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n});\nconst Fortmatic = new FortmaticConnector({\n  apiKey: config.fortmaticKey,\n  chainId: config.chainId\n});\nFortmatic.fortmatic = new fortmatic(config.fortmaticKey);\nconst Ledger = new LedgerConnector({\n  chainId: config.chainId,\n  url: supportedNetworkURLs[`${config.chainId}`],\n  pollingInterval: 1200\n}); // const Portis = new PortisConnector({\n//   dAppId: config.portisKey,\n//   networks: [config.chainId],\n// });\n// Portis.portis = new PortisConnect(config.portisKey, config.chainName);\n\nconst Authereum = new AuthereumConnector({\n  chainId: config.chainId\n}); // const Ledger = new LedgerConnector();\n\nexport default {\n  Injected,\n  Fortmatic,\n  // Portis,\n  Ledger,\n  Trezor,\n  Torus,\n  Authereum,\n  WalletConnect,\n  SquareLink\n};","map":{"version":3,"sources":["/home/naeem/f-w/market-luxery-leader/components/partials/account/walletConnectors.jsx"],"names":["InjectedConnector","TorusConnector","AuthereumConnector","TrezorConnector","FortmaticConnector","SquarelinkConnector","LedgerConnector","WalletConnectConnector","config","squarelink","require","supportedNetworkURLs","WalletConnect","rpc","chainId","bridge","qrcode","pollingInterval","Injected","supportedChainIds","chainIds","Torus","SquareLink","clientId","squarelink_id","networks","squareLinkchainIds","Trezor","url","manifestEmail","manifestAppUrl","Fortmatic","apiKey","fortmaticKey","fortmatic","Ledger","Authereum"],"mappings":"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","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector';\n// import { FortmaticConnector } from '@web3-react/fortmatic-connector'\n// import fortmatic from 'fortmatic';\n// import PortisConnect from '@portis/web3';\nimport { TorusConnector } from '@web3-react/torus-connector';\n// import { PortisConnector } from '@web3-react/portis-connector';\nimport { AuthereumConnector } from '@web3-react/authereum-connector';\nimport { TrezorConnector } from '@web3-react/trezor-connector';\nimport { FortmaticConnector } from '@web3-react/fortmatic-connector';\nimport { SquarelinkConnector } from '@web3-react/squarelink-connector';\nimport { LedgerConnector } from '@web3-react/ledger-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport config from '../config/config';\n\nconst squarelink = require('squarelink');\n\n// const defaultNetwork = 1;\nconst supportedNetworkURLs = {\n  1: 'https://mainnet.infura.io/v3/60ab76e16df54c808e50a79975b4779f',\n  2: 'https://rinkeby.infura.io/v3/60ab76e16df54c808e50a79975b4779f',\n  42: 'https://kovan.infura.io/v3/60ab76e16df54c808e50a79975b4779f',\n};\n\nexport const WalletConnect = new WalletConnectConnector({\n  rpc: { 1: supportedNetworkURLs[`${config.chainId}`] },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 1200,\n});\n\nconst Injected = new InjectedConnector({\n  supportedChainIds: config.chainIds ? config.chainIds : [config.chainId],\n});\n\nconst Torus = new TorusConnector({ chainId: config.chainId });\n// // const fm = new Fortmatic(config.fortmaticKey);\n// console.log(config.fortmaticKey)\n// export const fortmatic = new FortmaticConnector({ apiKey: config.fortmaticKey, chainId: 1 })\n// fortmatic.fortmatic = fm;\n// export const Fortmatic = new FortmaticConnector({\n//   api: FortmaticApi,\n//   apiKey: config.fortmaticKey,\n//   logoutOnDeactivation: false,\n// });\nconst SquareLink = new SquarelinkConnector({\n  clientId: config.squarelink_id,\n  networks: config.squareLinkchainIds ? config.squareLinkchainIds : [config.chainId],\n});\nSquareLink.squarelink = new squarelink(config.squarelink_id);\n\nconst Trezor = new TrezorConnector({\n  chainId: config.chainId,\n  url: supportedNetworkURLs[`${config.chainId}`],\n  pollingInterval: 1200,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234',\n});\nconst Fortmatic = new FortmaticConnector({ apiKey: config.fortmaticKey, chainId: config.chainId });\nFortmatic.fortmatic = new fortmatic(config.fortmaticKey);\n\nconst Ledger = new LedgerConnector({\n  chainId: config.chainId,\n  url: supportedNetworkURLs[`${config.chainId}`],\n  pollingInterval: 1200,\n});\n\n// const Portis = new PortisConnector({\n//   dAppId: config.portisKey,\n//   networks: [config.chainId],\n// });\n// Portis.portis = new PortisConnect(config.portisKey, config.chainName);\n\nconst Authereum = new AuthereumConnector({ chainId: config.chainId });\n\n// const Ledger = new LedgerConnector();\nexport default {\n  Injected,\n  Fortmatic,\n  // Portis,\n  Ledger,\n  Trezor,\n  Torus,\n  Authereum,\n  WalletConnect,\n  SquareLink,\n};\n"]},"metadata":{},"sourceType":"module"}